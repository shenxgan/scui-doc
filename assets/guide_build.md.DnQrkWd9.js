import{_ as a,c as e,o as i,a3 as s}from"./chunks/framework.CjiOseYb.js";const m=JSON.parse('{"title":"构建与部署","description":"","frontmatter":{},"headers":[],"relativePath":"guide/build.md","filePath":"guide/build.md","lastUpdated":1718880150000}'),t={name:"guide/build.md"},n=s('<h1 id="构建与部署" tabindex="-1">构建与部署 <a class="header-anchor" href="#构建与部署" aria-label="Permalink to &quot;构建与部署&quot;">​</a></h1><h2 id="构建" tabindex="-1">构建 <a class="header-anchor" href="#构建" aria-label="Permalink to &quot;构建&quot;">​</a></h2><p>当项目编写完成后，只需要一行命令就会打包你的应用</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes min-light min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> run</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> build</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>等待打包完成后在根目录生成dist文件夹。里面就是打包构建好的文件。接着可以把这个文件夹发给部署人员啦。</p><h2 id="构建分析" tabindex="-1">构建分析 <a class="header-anchor" href="#构建分析" aria-label="Permalink to &quot;构建分析&quot;">​</a></h2><p>打包完成后系统会自动在dist根目录中建立report.html。可以查看所有依赖模块体积分布。</p><div class="tip custom-block"><p class="custom-block-title">提示</p><p>将一些不常用但体积又大的依赖可以抽离，防止app.js过大而影响用户第一屏打开速速，关于抽离我们会在进阶文档中讲解。</p></div><h2 id="发布" tabindex="-1">发布 <a class="header-anchor" href="#发布" aria-label="Permalink to &quot;发布&quot;">​</a></h2><p>通常情况下只需要将打包生成的静态文件 dist 发布到服务器即可。</p><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><p>如果发布的域名与请求的接口域名不在同一个域，则需要使用Nginx或类似代理软件做代理来解决跨域问题。</p>',12),l=[n];function r(d,o,p,h,c,u){return i(),e("div",null,l)}const b=a(t,[["render",r]]);export{m as __pageData,b as default};
