import{_ as t,c as a,o as s,a3 as e}from"./chunks/framework.CjiOseYb.js";const u=JSON.parse('{"title":"路由","description":"","frontmatter":{},"headers":[],"relativePath":"guide/router.md","filePath":"guide/router.md","lastUpdated":1718880150000}'),i={name:"guide/router.md"},n=e(`<h1 id="路由" tabindex="-1">路由 <a class="header-anchor" href="#路由" aria-label="Permalink to &quot;路由&quot;">​</a></h1><p>路由是整套系统中最重要的存在，和系统左侧导航、页面标题甚至页面缓存都存在一定的关系。而我们的SCUI将这两者同步，大大减少了前端工作人员对左侧菜单的布局。</p><h2 id="系统路由" tabindex="-1">系统路由 <a class="header-anchor" href="#系统路由" aria-label="Permalink to &quot;系统路由&quot;">​</a></h2><p>当某些页面与业务脱节，而且百年不变的页面，比如登录,404,500等的页面可作为系统路由固定在路由表。<a href="https://github.com/shenxgan/scui/blob/main/src/router/systemRouter.js" target="_blank" rel="noreferrer">相关代码</a></p><h2 id="动态路由" tabindex="-1">动态路由 <a class="header-anchor" href="#动态路由" aria-label="Permalink to &quot;动态路由&quot;">​</a></h2><p>SCUI 使用动态路由。将复杂的路由表编写转换为可人工前台增删改的操作。获取路由的步骤如下：</p><ol><li>用户登录获取路由MAP存在localStorage <a href="https://github.com/shenxgan/scui/blob/main/src/views/login.vue" target="_blank" rel="noreferrer">相关代码</a></li><li>监听路由，当不存在路由时，<strong>一次性</strong>加载localStorage，转换成路由对象push到路由表 <a href="https://github.com/shenxgan/scui/blob/main/src/router/index.js" target="_blank" rel="noreferrer">相关代码</a></li></ol><h2 id="静态路由" tabindex="-1">静态路由 <a class="header-anchor" href="#静态路由" aria-label="Permalink to &quot;静态路由&quot;">​</a></h2><p>并非所有的项目都需要精细化权限的动态路由，只需要以角色区分的路由菜单，或者直接固定的路由。</p><p>书写格式与动态路由格式一致，比较动态路由在meta中多加入了role角色权限，为数组类型。一个菜单是否有权限显示，取决于它以及后代菜单是否有权限。如果又配置了静态路由，又启用了动态路由，系统会将静态路由插入动态路由之前。</p><p>相关配置在 <code>@\\config\\route.js</code></p><h2 id="路由对象" tabindex="-1">路由对象 <a class="header-anchor" href="#路由对象" aria-label="Permalink to &quot;路由对象&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes min-light min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	name</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;router-name&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	path</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;/router-url&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	meta</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">		icon</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;el-icon-eleme-filled&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">		title</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;路由名称&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	}</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	component</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &#39;home&#39;</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><table tabindex="0"><thead><tr><th>key</th><th>说明</th></tr></thead><tbody><tr><td>*name</td><td>路由的标识，必填且与页面组件的name一致，否则 <code>&lt;keep-alive&gt;</code> 页面缓存效果失效。</td></tr><tr><td>*path</td><td>路由在游览器地址栏里的hash值，也就是说这个路由要用什么URL地址来访问。</td></tr><tr><td>component</td><td>加载的页面组件位置，系统将自动组装成 <code>() =&gt; import(/* webpackChunkName: &quot;home&quot; */ &#39;@/views/home&#39;)</code> 的形式。</td></tr><tr><td>children</td><td>子集路由。</td></tr><tr><td>redirect</td><td>重定向地址。</td></tr><tr><td>*meta</td><td>元数据，见下方。</td></tr></tbody></table><h3 id="meta" tabindex="-1">meta <a class="header-anchor" href="#meta" aria-label="Permalink to &quot;meta&quot;">​</a></h3><table tabindex="0"><thead><tr><th>key</th><th>说明</th></tr></thead><tbody><tr><td>*title</td><td>显示名称。展示在菜单，标签和面包屑等中</td></tr><tr><td>hidden</td><td>是否隐藏菜单，大部分用在无需显示在左侧菜单中的页面，比如详情页</td></tr><tr><td>affix</td><td>是否固定，类似首页控制台在标签中是没有关闭按钮的</td></tr><tr><td>icon</td><td>显示图标，建立2级菜单都设置图标，否则菜单折叠都将显示空白</td></tr><tr><td>*type</td><td>类型：菜单，Iframe，外链，按钮</td></tr><tr><td>hiddenBreadcrumb</td><td>是否隐藏面包屑</td></tr><tr><td>active</td><td>左侧菜单的路由地址活动状态，比如打开详情页需要列表页的菜单活动状态</td></tr><tr><td>color</td><td>颜色值</td></tr><tr><td>fullpage</td><td>是否整页打开路由（脱离框架系），例如：<code>fullpage: true</code></td></tr><tr><td>role</td><td>静态路由时，所能访问路由的角色，例如：<code>role: [&quot;SA&quot;]</code></td></tr></tbody></table>`,16),r=[n];function l(d,h,p,o,k,c){return s(),a("div",null,r)}const b=t(i,[["render",l]]);export{u as __pageData,b as default};
