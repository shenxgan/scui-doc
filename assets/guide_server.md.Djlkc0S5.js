import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.CjiOseYb.js";const g=JSON.parse('{"title":"和服务端进行交互","description":"","frontmatter":{},"headers":[],"relativePath":"guide/server.md","filePath":"guide/server.md","lastUpdated":1718880150000}'),l={name:"guide/server.md"},p=n(`<h1 id="和服务端进行交互" tabindex="-1">和服务端进行交互 <a class="header-anchor" href="#和服务端进行交互" aria-label="Permalink to &quot;和服务端进行交互&quot;">​</a></h1><h2 id="请求流程" tabindex="-1">请求流程 <a class="header-anchor" href="#请求流程" aria-label="Permalink to &quot;请求流程&quot;">​</a></h2><p>SCUI封装<code>axios</code>后可以优雅的请求后端API，一个完整的前端交互到服务端处理流程是这样的</p><ol><li>UI组件交互操作</li><li>通过统一管理的API对象列表</li><li>通过统一请求拦截</li><li>使用封装的请求库发送请求</li><li>等待服务端返回结果</li><li>结果处理</li><li>更新视图</li></ol><h2 id="统一api列表管理" tabindex="-1">统一API列表管理 <a class="header-anchor" href="#统一api列表管理" aria-label="Permalink to &quot;统一API列表管理&quot;">​</a></h2><p>为了方便管理和维护API接口地址，我们将所有的请求都放在<code>@api</code>文件夹中，并且按照约定的对象格式编写API对象， 最后SCUI将API对象列表挂载在VUE中，使用<code>this.$API</code>，使其在任何地方都可以调用，而不用每次都引入。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes min-light min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	url</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> \`</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">\${</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">APIURL</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">}</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;">/login\`</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">						//APIURL</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	name</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;用户登录&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">							//API名称</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	get</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;"> async</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(data){					</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//请求方法</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">		return</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.get</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">.url</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> data);</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="统一的请求拦截" tabindex="-1">统一的请求拦截 <a class="header-anchor" href="#统一的请求拦截" aria-label="Permalink to &quot;统一的请求拦截&quot;">​</a></h2><p>在每一次发送请求前，请求库都会有个钩子函数处理发送前的各类参数。比如在请求头部里添加Authorization。 相关配置在 <code>@utils/request.js</code> HTTP request 拦截器中。</p><h2 id="如何使用" tabindex="-1">如何使用？ <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用？&quot;">​</a></h2><p>在定义好API对象后就可以在VUE视图文件或JS文件中调用此对象了。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes min-light min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> data </span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">		user</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;admin&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">		password</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	}</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> userInfo </span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">$API</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">login</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.get</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="请求错误处理" tabindex="-1">请求错误处理 <a class="header-anchor" href="#请求错误处理" aria-label="Permalink to &quot;请求错误处理&quot;">​</a></h2><p>错误分为两种，一种是接口服务端正常而业务错误错误，比如密码错误，用户名不存在。第二种为服务端报错，比如500了。</p><p>第一种处理比较方便，一般接口都会约定在返回的数据中含有code节点，然后根据code值该弹窗的弹窗就行了。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes min-light min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//返回成功</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	code</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#1976D2;--shiki-dark:#F8F8F8;"> 200</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	data</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {}</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	msg</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">//返回失败</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">{</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	code</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#1976D2;--shiki-dark:#F8F8F8;"> 500</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	data</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {}</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	msg</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;用户名不存在&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>而第二种是服务端报错,HTTP请求返回报错了。可以使用try，catch包围$API就可以捕捉到错误，我们拿本文第一个例子举例：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes min-light min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">async </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">login</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(){</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">	var</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> data </span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">		user</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;admin&quot;</span><span style="--shiki-light:#212121;--shiki-dark:#BBBBBB;">,</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">		password</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#22863A;--shiki-dark:#FFAB70;"> &quot;123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	}</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">	try</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> {</span></span>
<span class="line"><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">		var</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> userInfo </span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">$API</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">user</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.</span><span style="--shiki-light:#1976D2;--shiki-dark:#79B8FF;">login</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.get</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">(data)</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	}</span><span style="--shiki-light:#D32F2F;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;"> (error) {</span></span>
<span class="line"><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">		//这里捕捉到错误</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292EFF;--shiki-dark:#B392F0;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>值得一说的是，在大部分编写中，大家不必特意编写try，catch，因为在封装的请求库中已经对第二种报错做了统一的弹窗提示。 相关代码<code>@utils/request.js</code></p>`,19),t=[p];function h(e,k,r,F,d,B){return a(),i("div",null,t)}const y=s(l,[["render",h]]);export{g as __pageData,y as default};
