import{_ as s,c as a,o as i,a3 as n,a5 as t,a6 as e,a7 as p,a8 as l}from"./chunks/framework.CjiOseYb.js";const _=JSON.parse('{"title":"布局&样式","description":"","frontmatter":{},"headers":[],"relativePath":"guide/style.md","filePath":"guide/style.md","lastUpdated":1718880150000}'),h={name:"guide/style.md"},r=n('<h1 id="布局-样式" tabindex="-1">布局&amp;样式 <a class="header-anchor" href="#布局-样式" aria-label="Permalink to &quot;布局&amp;样式&quot;">​</a></h1><p>SCUI提供4套布局方案，分别是默认的分栏布局和头部导航布局，均可在配置中设置。</p><h2 id="布局" tabindex="-1">布局 <a class="header-anchor" href="#布局" aria-label="Permalink to &quot;布局&quot;">​</a></h2><p>在 <code>config/index.js</code> 中可配置LAYOUT，就可以配置不同的布局，LAYOUT提供4个配置项（default，header，menu，dock），分别对应默认的分栏布局、头部导航布局、经典菜单布局和Dock布局满足不同的视觉需求。</p><p>默认布局</p><img src="'+t+'"><p>头部导航布局</p><img src="'+e+'"><p>经典菜单布局</p><img src="'+p+'"><p>Dock布局</p><img src="'+l+`"><h2 id="样式" tabindex="-1">样式 <a class="header-anchor" href="#样式" aria-label="Permalink to &quot;样式&quot;">​</a></h2><p>采用scss动态样式语言，还是那句话：约定大于配置。我们约定有个样式总入口，然后@import不同的类型。这样做在联合开发中有极大的便利。</p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes min-light min-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">┌──</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> style</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">				# 全局样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;">	├──</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> style.scss</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">		# 总入口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;">	├──</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> app.scss</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">		# 框架样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;">	├──</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> fix.scss</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">		# 第三方样式库的FIX文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;">	├──</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> media.scss</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">		# 媒体查询样式(移动端样式)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;">	├──</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> pages.scss</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">		# 页面样式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">│</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;">	└──</span><span style="--shiki-light:#2B5581;--shiki-dark:#9DB1C5;"> ***.scss</span><span style="--shiki-light:#C2C3C5;--shiki-dark:#6B737C;">		# 其他自定义</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,15),k=[r];function d(c,o,C,B,g,m){return i(),a("div",null,k)}const u=s(h,[["render",d]]);export{_ as __pageData,u as default};
